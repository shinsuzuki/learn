from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from schemas.memo import InsertAndUpdateMemoSchema, MemoSchema, ResponseSchema, MemoStatusSchema
import cruds.memo as memo_crud
import db
    ・・・ 既存コード ・・・
# メモ情報全件取得のエンドポイント
@router.get("/", response_model=list[MemoSchema])
async def get_memos_list(db: AsyncSession = Depends(db.get_dbsession)):
    # 全てのメモをデータベースから取得
    memos = await memo_crud.get_memos(db)
    # SQLAlchemyのメモオブジェクトをPydanticモデルに変換
    memos_pydantic = []
    for memo in memos:
        # MemoStatusSchema を作成
        status = MemoStatusSchema(
            priority=memo.priority,
            due_date=memo.due_date,
            is_completed=memo.is_completed
        )
        # MemoSchema を作成
        memo_pydantic = MemoSchema(
            memo_id=memo.memo_id,
            title=memo.title,
            description=memo.description,
            status=status
        )
        memos_pydantic.append(memo_pydantic)
    return memos_pydantic

# 特定のメモ情報取得のエンドポイント
@router.get("/{memo_id}", response_model=MemoSchema)
async def get_memo_detail(memo_id: int,
                    db: AsyncSession = Depends(db.get_dbsession)):
    # 指定されたIDのメモをデータベースから取得
    memo = await memo_crud.get_memo_by_id(db, memo_id)
    if not memo:
        # メモが見つからない場合、HTTP 404エラーを返す
        raise HTTPException(status_code=404, detail="メモが見つかりません")
    # MemoStatusSchema を作成
    status = MemoStatusSchema(
        priority=memo.priority,
        due_date=memo.due_date,
        is_completed=memo.is_completed
    )
    # MemoSchema を作成
    memo_pydantic = MemoSchema(
        memo_id=memo.memo_id,
        title=memo.title,
        description=memo.description,
        status=status
    )
    return memo_pydantic
    ・・・ 既存コード ・・・